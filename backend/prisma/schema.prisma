generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

// generator dbml {
//   provider   = "prisma-dbml-generator"
//   projectName = "Gooyi"
//   projectDatabaseType = "PostgreSQL"
//   manyToMany = True
//   includeRelationFields = True
// }
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

// ------------------- Admin -------------------
model Admin {
  admin_id  Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  password  String
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

// ------------------- Mod -------------------
model Mod {
  mod_id    Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String   @unique
  password  String
  verified  Boolean  @default(false)
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  store_id  String
  store     Store    @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
}

// ------------------- User -------------------
model User {
  user_id    String    @id @unique
  first_name String
  last_name  String
  email      String?   @unique
  phone      String?   @unique
  active     Boolean   @default(false)
  last_login DateTime?
  create_at  DateTime  @default(now())
  update_at  DateTime  @updatedAt

  FeedBacks       FeedBack[]
  UserPoints      UserPoint[]
  favoriteCoupons Coupon[]     @relation("FavoriteCoupons")
  FavoriteStores  Store[]      @relation("FavoriteStore")
  coupons         CouponUser[]
  friends         User[]       @relation("Friendship")
  friendOf        User[]       @relation("Friendship")
}

// ------------------- Store -------------------
model Store {
  store_id    String   @id @unique
  name        String
  active      Boolean  @default(false)
  description String
  logo        String?
  background  String?
  enter_date  DateTime
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt

  Address        Address?
  Coupons        Coupon[]
  Rewards        Reward[]
  FeedBacks      FeedBack[]
  Mod            Mod[]
  OpeningHour    OpeningHour?
  Quests         Quest[]
  UserPoints     UserPoint[]
  FavoritedUsers User[]       @relation("FavoriteStore")
  category       Category[]   @relation("StoreAndCategory")
  service        Service[]    @relation("StoreService")
  status         Status[]     @relation("StoreStatus")
}

model Address {
  store_id String                   @unique
  location Unsupported("geography")
  street   String
  postcode String
  city     String
  store    Store                    @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
}

model OpeningHour {
  store_id String @unique
  Mon      String
  Tue      String
  Wed      String
  Thu      String
  Fri      String
  Sat      String
  Sun      String
  store    Store  @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
}

model Category {
  category_id Int     @id @default(autoincrement())
  name        String  @unique
  image       String? @unique
  stores      Store[] @relation("StoreAndCategory")
}

model Status {
  status_id Int     @id @default(autoincrement())
  name      String  @unique
  stores    Store[] @relation("StoreStatus")
}

model Service {
  service_id Int     @id @default(autoincrement())
  name       String  @unique
  stores     Store[] @relation("StoreService")
}

// ------------------- User And Store -------------------
model UserPoint {
  user_id  String
  store_id String
  point    Int
  store    Store  @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
  user     User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, store_id])
}

model FeedBack {
  feedback_id Int      @id @default(autoincrement())
  user_id     String
  store_id    String
  text        String
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt

  store         Store          @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
  user          User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  FeedBackReply FeedBackReply?
}

model FeedBackReply {
  feedback_id Int      @id
  reply       String
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt

  feedback FeedBack @relation(fields: [feedback_id], references: [feedback_id], onDelete: Cascade)
}

// ------------------- Quest -------------------
model Quest {
  quest_id          Int                @id @default(autoincrement())
  store_id          String
  point             Int
  type              QuestType
  store             Store              @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
  VisitStoreQuest   VisitStoreQuest?
  CollectPointQuest CollectPointQuest?
  PurchaseQuest     PurchaseQuest?
  UseCouponQuest    UseCouponQuest?
  CompleteQuest     CompleteQuest?
  RewardQuest       RewardQuest?
  LikeStoreQuest    LikeStoreQuest?
  CustomerTypeQuest CustomerTypeQuest?
}

model VisitStoreQuest {
  quest_id         Int   @id
  quest            Quest @relation(fields: [quest_id], references: [quest_id], onDelete: Cascade)
  // visit store x times in y days
  times            Int?
  duration         Int?
  // visit store x consecutive days 
  consecutive_days Int?
}

model CollectPointQuest {
  quest_id Int   @id
  quest    Quest @relation(fields: [quest_id], references: [quest_id], onDelete: Cascade)

  point    Int
  // collect x point in y days
  duration Int?
  // collect x point in y buy times
  times    Int?
}

model PurchaseQuest {
  quest_id Int   @id
  quest    Quest @relation(fields: [quest_id], references: [quest_id], onDelete: Cascade)
}

model UseCouponQuest {
  quest_id Int   @id
  quest    Quest @relation(fields: [quest_id], references: [quest_id], onDelete: Cascade)
}

model CompleteQuest {
  quest_id Int   @id
  quest    Quest @relation(fields: [quest_id], references: [quest_id], onDelete: Cascade)
}

model RewardQuest {
  quest_id Int   @id
  quest    Quest @relation(fields: [quest_id], references: [quest_id], onDelete: Cascade)
}

model LikeStoreQuest {
  quest_id Int   @id
  quest    Quest @relation(fields: [quest_id], references: [quest_id], onDelete: Cascade)
}

model CustomerTypeQuest {
  quest_id Int   @id
  quest    Quest @relation(fields: [quest_id], references: [quest_id], onDelete: Cascade)
}

enum QuestType {
  VISIT_STORE
  COLLECT_POINT
  PURCHASE
  USE_COUPON
  COMPLETE
  REWARD
  LIKE_STORE
  CUSTOMER_TYPE
}

// ------------------- Coupon -------------------
model Coupon {
  coupon_id   Int      @id @default(autoincrement())
  title       String
  start_date  DateTime
  end_date    DateTime
  expired_in  Int
  description String
  amount      Int
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt

  store_id   String           @unique
  store      Store            @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
  likedUsers User[]           @relation("FavoriteCoupons")
  priorities CouponPriority[]
  categories CouponCategory[]
  conditions Condition[]
  users      CouponUser[]
}

model CouponCategory {
  coupon_category_id Int      @id @default(autoincrement())
  name               String   @unique
  coupons            Coupon[]
}

model CouponPriority {
  coupon_priority_id Int      @id @default(autoincrement())
  name               String   @unique
  coupons            Coupon[]
}

model CouponUser {
  coupon_id Int
  user_id   String
  coupon    Coupon @relation(fields: [coupon_id], references: [coupon_id], onDelete: Cascade)
  user      User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  code      String @unique

  @@id([coupon_id, user_id])
}

// ------------------- Reward -------------------
model Reward {
  reward_id         Int      @id @default(autoincrement())
  title             String
  expired_in        Int
  description       String
  amount            Int
  max_coupon_amount Int
  create_at         DateTime @default(now())
  update_at         DateTime @updatedAt

  conditions Condition[]
  store_id   String      @unique
  store      Store       @relation(fields: [store_id], references: [store_id], onDelete: Cascade)
}

// Condition
model Condition {
  condition_id Int      @id @default(autoincrement())
  text         String   @unique
  rewards      Reward[]
  copouns      Coupon[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}
